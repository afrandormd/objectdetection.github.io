{"version":3,"sources":["App.js","utilities.js","index.js"],"names":["App","webcamRef","useRef","canvasRef","detect","async","current","video","readyState","videoWidth","videoHeight","width","height","obj","net","console","log","drawRect","detections","ctx","forEach","prediction","x","y","text","color","Math","floor","random","toString","strokeStyle","font","fillStyle","beginPath","fillText","rect","stroke","getContext","useEffect","cocossd","setInterval","runCoco","React","createElement","className","src","concat","process","alt","Webcam","ref","muted","style","position","marginLeft","marginRight","left","right","top","textAlign","zindex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4XA2GeA,MA/Ff,WACE,MAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAcnBE,EAASC,UAEb,GAC+B,qBAAtBJ,EAAUK,SACK,OAAtBL,EAAUK,SAC6B,IAAvCL,EAAUK,QAAQC,MAAMC,WACxB,CAEA,MAAMD,EAAQN,EAAUK,QAAQC,MAC1BE,EAAaR,EAAUK,QAAQC,MAAME,WACrCC,EAAcT,EAAUK,QAAQC,MAAMG,YAG5CT,EAAUK,QAAQC,MAAMI,MAAQF,EAChCR,EAAUK,QAAQC,MAAMK,OAASF,EAGjCP,EAAUG,QAAQK,MAAQF,EAC1BN,EAAUG,QAAQM,OAASF,EAI3B,MAAMG,QAAYC,EAAIV,OAAOG,GAC7BQ,QAAQC,IAAIH,GCnDMI,EAACC,EAAYC,KAEjCD,EAAWE,QAAQC,IAGnB,MAAOC,EAAGC,EAAGZ,EAAOC,GAAUS,EAAiB,KACzCG,EAAOH,EAAkB,MAGzBI,EAAQC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,IAC1DV,EAAIW,YAAc,IAAML,EACxBN,EAAIY,KAAO,aACXZ,EAAIa,UAAYP,EAGhBN,EAAIc,YACJd,EAAIa,UAAY,IAAMP,EACtBN,EAAIe,SAASV,EAAMF,EAAGC,GACtBJ,EAAIgB,KAAKb,EAAGC,EAAGZ,EAAOC,GACtBO,EAAIiB,YDuCFnB,CAASJ,EAJGV,EAAUG,QAAQ+B,WAAW,SAU7C,OAFAC,oBAAU,KA7CMjC,WAGd,MAAMS,QAAYyB,MAGlBC,YAAY,KACVpC,EAAOU,IACN,KAqCU2B,IAAW,IAGxBC,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAI,8BACHD,IAAAC,cAAA,OAAKE,IAAG,GAAAC,OAAKC,GAAsB,gBAAgBpC,MAAM,KAAKqC,IAAI,eAClEN,IAAAC,cAAA,OAAKE,IAAG,GAAAC,OAAKC,GAAsB,mBAAmBpC,MAAM,MAAMqC,IAAI,oBACvEN,IAAAC,cAAA,UAAQC,UAAU,cAChBF,IAAAC,cAACM,IAAM,CACLC,IAAKjD,EACLkD,OAAO,EACPC,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,IAAK,IACLC,UAAW,SACXC,OAAQ,EACRjD,MAAO,IACPC,OAAQ,OAIZ8B,IAAAC,cAAA,UACEO,IAAK/C,EACLiD,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,IAAK,IACLC,UAAW,SACXC,OAAQ,EACRjD,MAAO,IACPC,OAAQ,UE9FpBiD,IAASC,OACPpB,IAAAC,cAACD,IAAMqB,WAAU,KACfrB,IAAAC,cAAC3C,EAAG,OAENgE,SAASC,eAAe,W","file":"static/js/main.b694f422.chunk.js","sourcesContent":["// Import dependencies\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n// 1. TODO - Import required model here\r\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\r\n// e.g. import * as tfmodel from \"@tensorflow-models/tfmodel\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\n// 2. TODO - Import drawing utility here\r\n// e.g. import { drawRect } from \"./utilities\";\r\nimport { drawRect } from \"./utilities\";\r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  // Main function\r\n  const runCoco = async () => {\r\n    // 3. TODO - Load network \r\n    // e.g. const net = await cocossd.load();\r\n    const net = await cocossd.load();\r\n    \r\n    //  Loop and detect hands\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 10);\r\n  };\r\n\r\n  const detect = async (net) => {\r\n    // Check data is available\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get Video Properties\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Set video width\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas height and width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n\r\n      // 4. TODO - Make Detections\r\n      // e.g. const obj = await net.detect(video);\r\n      const obj = await net.detect(video);\r\n      console.log(obj);\r\n\r\n      // Draw mesh\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      // 5. TODO - Update drawing utility\r\n      // drawSomething(obj, ctx)  \r\n      drawRect(obj, ctx);\r\n    }\r\n  };\r\n\r\n  useEffect(()=>{runCoco()},[]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Real Time Object Detection</h1>\r\n       <img src={`${process.env.PUBLIC_URL}/logo192.png`} width=\"50\" alt=\"React Logo\" />\r\n       <img src={`${process.env.PUBLIC_URL}/tensorflow.png`} width=\"100\" alt=\"tensorflow-logo\" />\r\n      <header className=\"App-header\">\r\n        <Webcam\r\n          ref={webcamRef}\r\n          muted={true} \r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            top: 200,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            top: 200,\r\n            textAlign: \"center\",\r\n            zindex: 8,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const drawRect = (detections, ctx) =>{\r\n  // Loop through each prediction\r\n    detections.forEach(prediction => {\r\n\r\n    // Extract boxes and classes\r\n    const [x, y, width, height] = prediction['bbox']; \r\n    const text = prediction['class']; \r\n\r\n    // Set styling\r\n    const color = Math.floor(Math.random()*16777215).toString(16);\r\n    ctx.strokeStyle = '#' + color\r\n    ctx.font = '24px Arial';\r\n    ctx.fillStyle = color\r\n\r\n    // Draw rectangles and text\r\n    ctx.beginPath();   \r\n    ctx.fillStyle = '#' + color\r\n    ctx.fillText(text, x, y);\r\n    ctx.rect(x, y, width, height); \r\n    ctx.stroke();\r\n    });\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}